diff --git a/node_modules/pyodide/load-pyodide.js b/node_modules/pyodide/load-pyodide.js
index 9f997c2..93e2bda 100644
--- a/node_modules/pyodide/load-pyodide.js
+++ b/node_modules/pyodide/load-pyodide.js
@@ -1,7 +1,7 @@
 import { Module } from "./module.js";
 
-const IN_NODE =
-  typeof process !== "undefined" && process.release.name !== "undefined";
+// const IN_NODE =
+//   typeof process !== "undefined" && process.release.name !== "undefined";
 
 /** @typedef {import('./pyproxy.js').PyProxy} PyProxy */
 /** @private */
@@ -13,16 +13,16 @@ let baseURL;
 export async function initializePackageIndex(indexURL) {
   baseURL = indexURL;
   let package_json;
-  if (IN_NODE) {
-    const fsPromises = await import("fs/promises");
-    const package_string = await fsPromises.readFile(
-      `${indexURL}packages.json`
-    );
-    package_json = JSON.parse(package_string);
-  } else {
-    let response = await fetch(`${indexURL}packages.json`);
-    package_json = await response.json();
-  }
+  // if (IN_NODE) {
+  //   const fsPromises = await import("fs/promises");
+  //   const package_string = await fsPromises.readFile(
+  //     `${indexURL}packages.json`
+  //   );
+  //   package_json = JSON.parse(package_string);
+  // } else {
+  let response = await fetch(`${indexURL}packages.json`);
+  package_json = await response.json();
+  // }
   if (!package_json.packages) {
     throw new Error(
       "Loaded packages.json does not contain the expected key 'packages'."
@@ -68,7 +68,7 @@ if (globalThis.document) {
     // This is async only for consistency
     globalThis.importScripts(url);
   };
-} else if (typeof process !== "undefined" && process.release.name === "node") {
+}/* else if (typeof process !== "undefined" && process.release.name === "node") {
   const pathPromise = import("path").then((M) => M.default);
   const fetchPromise = import("node-fetch").then((M) => M.default);
   const vmPromise = import("vm").then((M) => M.default);
@@ -85,7 +85,7 @@ if (globalThis.document) {
       await import(path.resolve(url));
     }
   };
-} else {
+}*/ else {
   throw new Error("Cannot determine runtime environment");
 }
 
@@ -187,8 +187,8 @@ async function _loadPackage(names, messageCallback, errorCallback) {
       } else {
         errorCallback(
           `URI mismatch, attempting to load package ${pkg} from ${uri} ` +
-            `while it is already loaded from ${loaded}. To override a dependency, ` +
-            `load the custom package first.`
+          `while it is already loaded from ${loaded}. To override a dependency, ` +
+          `load the custom package first.`
         );
         continue;
       }
